<docs>
	<page title="Getting Started">

	</page>
	<page title="Patterns">

	</page>
	<enum name="CL_LogLevel">

	</enum>
	<struct name="CL_Logger">
		<definition>typedef struct _CL_Logger CL_Logger;</definition>
		<description>
			Contains the data needed for logging. The function <ref type="function" name="CL_LOGGER_CREATE">CL_LOGGER_CREATE</ref> will return a pointer to
			a struct of this type.
			<code>
				CL_Logger *logger = CL_LOGGER_CREATE(1, "Logger Name", CL_DEFAULT_PATTERN);
			</code>
		</description>
	</struct>
	<function type="CL_Logger *" name="CL_LOGGER_CREATE">
		<definition>CL_Logger *CL_LOGGER_CREATE(uint16_t ouput_count, const char *name, const char *pattern);</definition>
		<description>
			This function will create a logger.
			<code>
				CL_Logger *logger = CL_LOGGER_CREATE(1, "Logger Name", CL_DEFAULT_PATTERN);
			</code>
		</description>
		<parameters>
			<li type="uint16_t" name="output_count">The number of FILE structs the logger will output to.
				To add an output call the function <ref type="function" name="CL_LOGGER_OUTPUT_ADD">CL_LOGGER_OUTPUT_ADD</ref>.
				This value should not be 0.
			</li>
			<li type="const char *" name="name">The name of the logger that will be output if the <ref type="page" name="Patterns">pattern</ref> contains '%N'. 
				If NULL is passed it will be set to "UNNAMED".</li>
			<li type="const char *" name="pattern">The <ref type="page" name="Patterns">pattern</ref> to be used for the logger.</li>
		</parameters>
		<return_value>
			The created logger.
		</return_value>
	</function>
	<function type="void" name="CL_LOGGER_OUTPUT_ADD">
		<definition>void CL_LOGGER_OUTPUT_ADD(CL_Logger *logger, FILE *file);</definition>
		<description>
			This function will add the FILE output to the specified logger. This should be done before any logging, usually right after a call to
			<ref type="function" name="CL_LOGGER_CREATE">CL_LOGGER_CREATE</ref>.
		</description>
		<parameters>
			<li type="CL_Logger *" name="logger">The logger to add the FILE to.</li>
			<li type="FILE *" name="file">The file to be added.</li>
		</parameters>
	</function>
	<function type="void" name="CL_LOGGER_DESTROY">
		<definition>void CL_LOGGER_DESTROY(CL_Logger *logger);</definition>
		<description>
			This function will free all the data related to the specified logger.
		</description>
		<parameters>
			<li type="CL_Logger *" name="logger">The logger to free.</li>
		</parameters>
	</function>
	<function type="void" name="CL_LOG_...">
		<definition>
			void CL_LOG_TRACE(CL_Logger *logger, const char *format, ...);
			void CL_LOG_INFO(CL_Logger *logger, const char *format, ...);
			void CL_LOG_WARN(CL_Logger *logger, const char *format, ...);
			void CL_LOG_ERROR(CL_Logger *logger, const char *format, ...);
			void CL_LOG_FATAL(CL_Logger *logger, const char *format, ...);
		</definition>
		<description>
			These functions will output to the file(s) specified in the logger.
			The output is analogous to fprintf where 'logger' specifies the file and 'format' and '...' specify the output.
			<code>
				int x = 2;
				CL_LOG_TRACE(logger, "x = %d", );
			</code>
			The different functions differ in the log level and the color of the output. If the log level set in the logger passed to the function is lower than the one 
			specified by the function (see <ref type="enum" name="CL_LogLevel">CL_LogLevel</ref>) no output will be printed.
			Calling CL_LOG_FATAL will exit the program by calling the exit function.
			<code>
				exit(EXIT_FAILURE);
			</code>
		</description>
		<parameters>
			<li type="CL_Logger *" name="logger">The logger to output to.</li>
			<li type="const char *" name="format">Same as format in printf or fprintf from the standard library.</li>
			<li type="va_args" name="...">Same as ... in printf or fprintf from the standard library.</li>
		</parameters>
	</function>
	<function type="void" name="CL_LOGGER_LVL_SET">
		<definition>void CL_LOGGER_LVL_SET(CL_Logger *logger, CL_LogLevel lvl);</definition>
		<description>
			Sets the level at which the logger is to output. See <ref type="enum" name="CL_LogLevel">CL_LogLevel</ref> for an explanation of the levels.
		</description>
		<parameters>
			<li type="CL_Logger *" name="logger">The logger to modify.</li>
			<li type="CL_LogLevel" name="type">The level to set the logger to.</li>
		</parameters>
	</function>
	<function type="CL_LogLevel" name="CL_LOGGER_LVL_GET">
		<definition>CL_LogLevel CL_LOGGER_LVL_GET(CL_Logger *logger);</definition>
		<description>
			Returns the set level of the specified logger. See <ref type="enum" name="CL_LogLevel">CL_LogLevel</ref> for an explanation of the levels.
		</description>
		<parameters>
			<li type="CL_Logger *" name="logger">The logger to get the value from.</li>
		</parameters>
		<return_value>
			The level of the specified logger.
		</return_value>
	</function>
</docs>